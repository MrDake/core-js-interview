// Область видимости — набор правил, определяющих, где и как
// осуществляется поиск переменной (идентификатора).
// Поиск может выполняться для цели 
// присваивания переменной (LHS, или левосторонняя ссылка) 
// или же для цели чтения ее значения (RHS, или правосторонняя ссылка).

// Область видимости собирает и ведет список всех объявленных 
// индентификаторов (переменных) и устанавливаеи строгий набор правил
// их доступности для кода, выполняемого в данный момент

// смотри файл initialisation.js !!!!

// JS использует модель лексической(!) области видимости

// Области видимости бывают:
//          - лексические (lexical scope) - использует JS
//          - динамические (dynamic scope)

// Лексической областью видимости (lexical scope)  -  назыввется 
// область видимости определяемая на стадии лексического анализа

// Лексическая область видимости 
// определяется тем, где вы расмести переменные и блоки области видимости
// во время написания кода программы
// (в основном, но можно обмануть, например eval, with) 
// жестко фиксируется на момент обработки вашего кода лексическим анализатором

// Лексическая область видимости определяется только местом объявлея функции
// исключительно во время объявления функции во время написания кода

// eval() - допускает динамическое выполнение кода, 
// что может мутировать область видимости на лету
// 'use strict' выполняет код eval() в ее собственной
// лексической области видимости
// --
// setTimeout(..)
// setInterval(..)
// в первом аргументе могут получить строку которая выполняется как код
// --
// new Function(..)
// в последнем аргументе строку которая выполняется 
// как динамически сгенерированная функция
// --
// with | если коротко, то это устарело и не используется
// создает новую область видимости в старой и переменные в ней булут видны
// 'use strict' полностью запрещает with